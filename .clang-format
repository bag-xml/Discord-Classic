# clang-format
# Made by: Ingmar Delsink
# https://ingmar.dels.ink
# See http://clang.llvm.org/docs/ClangFormatStyleOptions.html
# Tested with: clang-format version 3.7.1

# General
#########

# The style used for all options not specifically set in the configuration.
# This option is supported only in the clang-format configuration (both within -style='{...}' and the .clang-format file).
# Possible values:
#   LLVM A style complying with the LLVM coding standards
#   Google A style complying with Google’s C++ style guide
#   Chromium A style complying with Chromium’s style guide
#   Mozilla A style complying with Mozilla’s style guide
#   WebKit A style complying with WebKit’s style guide
BasedOnStyle: Google

# TabWidth (unsigned)
# The number of columns used for tab stops.
TabWidth: 4

# IndentWidth (unsigned)
# The number of columns to use for indentation.
IndentWidth: 4

# UseTab (UseTabStyle)
# The way to use tab characters in the resulting file.
# Possible values:
#   UT_Never (in configuration: Never) Never use tab.
#   UT_ForIndentation (in configuration: ForIndentation) Use tabs only for indentation.
#   UT_Always (in configuration: Always) Use tabs whenever we need to fill whitespace that spans at least from one tab stop to the next one.
UseTab: Never

# C++
#####

# Language (LanguageKind)
# Language, this format style is targeted at.
# Possible values:
#   LK_None (in configuration: None) Do not use.
#   LK_Cpp (in configuration: Cpp) Should be used for C, C++, ObjectiveC, ObjectiveC++.
#   LK_Java (in configuration: Java) Should be used for Java.
#   LK_JavaScript (in configuration: JavaScript) Should be used for JavaScript.
#   LK_Proto (in configuration: Proto) Should be used for Protocol Buffers (https://developers.google.com/protocol-buffers/).
#   LK_TableGen (in configuration: TableGen) Should be used for TableGen code.
Language: ObjC

# Standard (LanguageStandard)
# Format compatible with this standard, e.g. use A<A<int> > instead of A<A<int>> for LS_Cpp03.
# Possible values:
#   LS_Cpp03 (in configuration: Cpp03) Use C++03-compatible syntax.
#   LS_Cpp11 (in configuration: Cpp11) Use features of C++11 (e.g. A<A<int>> instead of A<A<int> >).
#   LS_Auto (in configuration: Auto) Automatic detection based on the input.
Standard: Cpp11

# AlignAfterOpenBracket (BracketAlignmentStyle)
# If true, horizontally aligns arguments after an open bracket.
# This applies to round brackets (parentheses), angle brackets and square brackets.
# Possible values:
#   BAS_Align (in configuration: Align) Align parameters on the open bracket, e.g.:
#   someLongFunction(argument1,
#                    argument2);
#   BAS_DontAlign (in configuration: DontAlign) Don’t align, instead use ContinuationIndentWidth, e.g.:
#   someLongFunction(argument1,
#   argument2);
#   BAS_AlwaysBreak (in configuration: AlwaysBreak) Always break after an open bracket, if the parameters don’t fit on a single line, e.g.:
#   someLongFunction(
#       argument1, argument2);
AlignAfterOpenBracket: BlockIndent

# AlignConsecutiveAssignments (bool)
# If true, aligns consecutive assignments.
# This will align the assignment operators of consecutive lines. This will result in formattings like
# int aaaa = 12;
# int b    = 23;
# int ccc  = 23;
AlignConsecutiveAssignments: true

# AlignOperands (bool)
# If true, horizontally align operands of binary and ternary expressions.
# Specifically, this aligns operands of a single expression that needs to be split over multiple lines, e.g.:
# int aaa = bbbbbbbbbbbbbbb +
#           ccccccccccccccc;
AlignOperands: false

# AllowShortFunctionsOnASingleLine (ShortFunctionStyle)
# Dependent on the value, int f() { return 0; } can be put on a single line.
# Possible values:
#   SFS_None (in configuration: None) Never merge functions into a single line.
#   SFS_Empty (in configuration: Empty) Only merge empty functions.
#   SFS_Inline (in configuration: Inline) Only merge functions defined inside a class. Implies “empty”.
#   SFS_All (in configuration: All) Merge all functions fitting on a single line.
AllowShortFunctionsOnASingleLine: Empty

# AllowShortIfStatementsOnASingleLine (bool)
# If true, if (a) return; can be put on a single line.
AllowShortIfStatementsOnASingleLine: false

# AllowShortLoopsOnASingleLine (bool)
# If true, while (true) continue; can be put on a single line.
AllowShortLoopsOnASingleLine: false

BreakBeforeBinaryOperators: NonAssignment

# BreakBeforeBraces (BraceBreakingStyle)
# The brace breaking style to use.
# Possible values:
#   BS_Attach (in configuration: Attach) Always attach braces to surrounding context.
#   BS_Linux (in configuration: Linux) Like Attach, but break before braces on function, namespace and class definitions.
#   BS_Mozilla (in configuration: Mozilla) Like Attach, but break before braces on enum, function, and record definitions.
#   BS_Stroustrup (in configuration: Stroustrup) Like Attach, but break before function definitions, catch, and else.
#   BS_Allman (in configuration: Allman) Always break before braces.
#   BS_GNU (in configuration: GNU) Always break before braces and add an extra level of indentation to braces of control statements, not to those of class, function or other definitions.
#   BS_WebKit (in configuration: WebKit) Like Attach, but break before functions.
#   BS_Custom (in configuration: Custom) Configure each individual brace in BraceWrapping.
BreakBeforeBraces: Attach

# ColumnLimit (unsigned)
# The column limit.
# A column limit of 0 means that there is no column limit. In this case, clang-format will respect the input’s line breaking decisions within statements unless they contradict other rules.
ColumnLimit: 0

# IndentCaseLabels (bool)
# Indent case labels one level from the switch statement.
# When false, use the same indentation level as for the switch statement. Switch statement body is always indented one level more than case labels.
IndentCaseLabels: true

InsertBraces: true

# MaxEmptyLinesToKeep (unsigned)
# The maximum number of consecutive empty lines to keep.
MaxEmptyLinesToKeep: 2

# ObjCBlockIndentWidth (unsigned)
# The number of characters to use for indentation of ObjC blocks.
ObjCBlockIndentWidth: 4

# ObjCSpaceAfterProperty (bool)
# Add a space after @property in Objective-C, i.e. use @property (readonly) instead of @property(readonly).
ObjCSpaceAfterProperty: true

# ObjCSpaceBeforeProtocolList (bool)
# Add a space in front of an Objective-C protocol list, i.e. use Foo <Protocol> instead of Foo<Protocol>.
ObjCSpaceBeforeProtocolList: false

# PointerAlignment (PointerAlignmentStyle)
# Pointer and reference alignment style.
# Possible values:
#   PAS_Left (in configuration: Left) Align pointer to the left.
#   PAS_Right (in configuration: Right) Align pointer to the right.
#   PAS_Middle (in configuration: Middle) Align pointer in the middle.
PointerAlignment: Left

# SortIncludes (bool)
# If true, clang-format will sort #includes.
SortIncludes: true

# SpaceAfterCStyleCast (bool)
# If true, a space may be inserted after C style casts.
SpaceAfterCStyleCast: false

# SpacesBeforeTrailingComments (unsigned)
# The number of spaces before trailing line comments (// - comments).
# This does not affect trailing block comments (/* - comments) as those commonly have different usage patterns and a number of special cases.
SpacesBeforeTrailingComments: 1

# SpacesInAngles (bool)
# If true, spaces will be inserted after < and before > in template argument lists.
SpacesInAngles: false

# SpacesInCStyleCastParentheses (bool)
# If true, spaces may be inserted into C style casts.
SpacesInCStyleCastParentheses: false

# SpacesInParentheses (bool)
# If true, spaces will be inserted after ( and before ).
SpacesInParentheses: false

# SpacesInSquareBrackets (bool)
# If true, spaces will be inserted after [ and before ].
SpacesInSquareBrackets: false
